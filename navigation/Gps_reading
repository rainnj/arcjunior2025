import serial
import time
import csv
from datetime import datetime

# === CONFIG ===
GPS_PORT = "COM8"  # Change to your port
GPS_BAUD = 9600
LOG_FILE = "gps_log_custom.csv"

def parse_custom_line(line: str):
    """
    Extract latitude, longitude, and date from custom line format:
    "Location: 52.475448,13.457768  Date: 6/23/2025"
    """
    try:
        print(f"📝 Raw line: {line}")
        if "Location:" in line and "Date:" in line:
            loc_part, date_part = line.split("  Date:")
            coords = loc_part.replace("Location:", "").strip().split(',')
            lat = float(coords[0])
            lon = float(coords[1])
            date_str = date_part.strip()
            print(f"✅ Parsed Latitude: {lat}")
            print(f"✅ Parsed Longitude: {lon}")
            print(f"📅 Parsed Date: {date_str}")
            return lat, lon, date_str
    except Exception as e:
        print(f"❌ Failed to parse line: {e}")
    return None, None, None

def init_csv():
    with open(LOG_FILE, mode='w', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(["LogTime", "Latitude", "Longitude", "Reported Date"])

def log_to_csv(lat, lon, date_str):
    with open(LOG_FILE, mode='a', newline='') as f:
        writer = csv.writer(f)
        log_time = datetime.utcnow().strftime("%Y-%m-%d %H:%M:%S")
        writer.writerow([log_time, lat, lon, date_str])
        print("💾 Logged to CSV.")

def main():
    print("🚀 Starting custom GPS reader...")
    init_csv()
    
    try:
        print(f"🔌 Connecting to GPS on {GPS_PORT}...")
        ser = serial.Serial(GPS_PORT, GPS_BAUD, timeout=1)
        print("✅ Connected.")
    except Exception as e:
        print(f"❌ Failed to connect: {e}")
        return

    try:
        while True:
            line = ser.readline().decode('ascii', errors='ignore').strip()
            if not line:
                continue

            lat, lon, date_str = parse_custom_line(line)
            if lat is not None and lon is not None:
                print(f"🌍 Location: {lat:.6f}, {lon:.6f}  |  Date: {date_str}")
                log_to_csv(lat, lon, date_str)
            else:
                print("⚠️ Skipping invalid line.")
            time.sleep(1)
    except KeyboardInterrupt:
        print("\n🛑 Stopped by user.")
    finally:
        ser.close()
        print(f"📁 Log saved to: {LOG_FILE}")

if __name__ == "__main__":
    main()
